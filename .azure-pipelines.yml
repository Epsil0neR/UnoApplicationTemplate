schedules:
- cron: "30 08 * * Mon-Fri" # Format is "Minutes Hours DayOfMonth Month DayOfWeet" in UTC (that's why 08 is 3h EST)
  displayName: 'Nightly weekdays build - 3:30 EST'
  always: false # If nothing changed, don't start a new run.
  branches:
    include:
      - master
      - release/*
      - feature/*
pr:
 branches:
   include:
   - master
   - release/*
   - feature/*

trigger: none
# trigger:        # Use this if you want runs whenever the master branch is updated.
#   branches:
#     include:
#       - master

resources:
  containers:
    - container: windows
      image: nventive/build-agent:vs16.6.0

variables:

  # Prerequisites - Variable groups
  # Make sure you have the following variable groups in your Azure pipeline library:
  #
  # ApplicationTemplate.Distribution.Internal.Android
  #   ApplicationIdentifier: This is the internal application id of the app for AppCenter releases. Note that this variable is used by Nimue to automatically change the package name.
  #   AndroidSigningKeyAlias: This is the keystore alias.
  #   AndroidSigningKeyPass: This is the keystore keypass (secured).
  #   AndroidSigningStorePass: This is the keystore storepass (secured).
  #
  # ApplicationTemplate.Distribution.GooglePlay
  #   ApplicationIdentifier: This is the official application id of the app that should go on the store. Note that this variable is used by Nimue to automatically change the package name.
  #   AndroidSigningKeyAlias: This is the keystore alias.
  #   AndroidSigningKeyPass: This is the keystore keypass (secured).
  #   AndroidSigningStorePass: This is the keystore storepass (secured).
  #
  # ApplicationTemplate.Distribution.Internal.iOS
  #   ApplicationIdentifier: This is the internal application id of the app for AppCenter releases. Note that this variable is used by Nimue to automatically change the bundle id.
  #   AppleCertificatePassword: The certificate password (secured).
  #
  # ApplicationTemplate.Distribution.AppStore
  #   ApplicationIdentifier: The official bundle id of the app that should go on the store; the app will be resigned with this id. Note that this variable is used by Nimue to automatically change the bundle id.
  #   AppleCertificatePassword: The certificate password (secured).
  #   AppleTeamId: The developer account team id (secured).
  #   AppleTeamName: The developer account team name.

  # Prerequisites - Secured files
  # Make sure you have the following secured files in your Azure pipeline library.
  #
  # Android
  InternalKeystore: com.nventive.internal.applicationtemplate.jks # This is the internal keystore used for internal builds.
  GooglePlayKeystore: com.nventive.applicationtemplate.jks # This is the official keystore used for Google Play.
  # iOS
  InternalProvisioningProfile: com.nventive.internal.applicationtemplate.mobileprovision # This is the internal provisioning profile for internal builds.
  InternalCertificate: nventive.internal.p12 # This is the certificate from the entreprise account used to sign internal builds.
  AppStoreProvisioningProfile: com.nventive.applicationtemplate.mobileprovision # This is the official provisioning profile for the AppStore.
  AppStoreCertificate: nventive.p12 # This is the official certificate used to sign AppStore builds.

  # Prerequisites - Service connections
  # Make sure you have the following service connections in your Azure pipeline library.
  GooglePlayServiceConnection: GooglePlay-nventive-ApplicationTemplate
  AppCenterServiceConnection: AppCenter-nventive-framework
  AppStoreServiceConnection: AppStore-nventive

  # AppCenter slugs
  # The "app slug" corresponds to the identifiers of the app in AppCenter; to find it, navigate to the app in a browser and;
  # the URL should look like this: https://appcenter.ms/orgs/{orgId}/apps/{appId}; the slug is simply: "{orgId}/{appId}".
  AppCenterAndroidSlug: 'nventive-framework/Application-Template-1'
  AppCenteriOSSlug: 'nventive-framework/Application-Template'
  AppCenterUWPSlug: 'nventive-framework/Application-Template-2'
  AppCenterAndroidSlug_Production: 'nventive-framework/ApplicationTemplate-Production-1'
  AppCenteriOSSlug_Production: 'nventive-framework/ApplicationTemplate-Production'
  AppCenterUWPSlug_Production: 'nventive-framework/ApplicationTemplate-Production-2'
  AppCenterAndroidSlug_Canary: 'nventive-framework/Application-Template-Canary-1'
  AppCenteriOSSlug_Canary: 'nventive-framework/Application-Template-Canary'
  AppCenterUWPSlug_Canary: 'nventive-framework/Application-Template-Canary-2'

  # Azure subscription
  # AzureSubscriptionName:
  # AzureStorageAccountName:

  # Solution to build
  SolutionFileName: ApplicationTemplate.sln

  # Pool names
  windowsPoolName: 'windows 1809'
  macOSPoolName: 'Default'

  # Versions to use
  NUGET_VERSION: 5.4.0
  XAMARIN_IOS_VERSION: 13.16

  # Name of the folder where the artefacts will be placed. Variable used in build and release phases.
  # We make seperate folders so that releases can each download only the folder they need.
  AndroidArtifactName: Android
  iOSArtifactName: iOS
  UWPArtifactName: UWP
  WASMArtifactName: WASM
  TestsArtifactName: Tests

  # Path where packages (nuget or app packages) will be copied to.
  PackageOutputPath: $(Build.ArtifactStagingDirectory)

  # For Application.Building.Light optimizations
  IsLightBuild: $[eq(variables['Build.Reason'], 'PullRequest')]
  IsCanary: $[startsWith(variables['Build.SourceBranch'], 'refs/heads/canaries')]

  # Android variables (hosted agent)
  # ANDROID_NDK_HOME: C:\Microsoft\AndroidNDK64\android-ndk-r16b
  # ANDROID_NDK_PATH: C:\Microsoft\AndroidNDK64\android-ndk-r16b
  # AndroidNdkDirectory: C:\Microsoft\AndroidNDK64\android-ndk-r16b

  # iOS variables (hosted agent) / See ios-build-select-version.yml if needed.
  # xCodeRoot: '/Applications/Xcode_11.3.app'
  # XamarinSDKVersion: 6_6_0

stages:
- stage: Build_Staging
  condition: eq(variables['IsCanary'], 'false')
  jobs:
  - template: build/stage-build.yml
    parameters:
      applicationEnvironment: Staging
      androidKeyStoreFile: $(InternalKeystore)
      androidVariableGroup: 'ApplicationTemplate.Distribution.Internal.Android'
      iosProvisioningProfileFile: $(InternalProvisioningProfile)
      iosCertificateFile: $(InternalCertificate)
      iosVariableGroup: 'ApplicationTemplate.Distribution.Internal.iOS'

- stage: Build_Production
  dependsOn: Build_Staging # Use dependsOn: [] if you want to run both builds in parallel.
  condition: and(succeeded(), eq(variables['IsLightBuild'], 'false'))
  jobs:
  - template: build/stage-build.yml
    parameters:
      applicationEnvironment: Production
      androidKeyStoreFile: $(GooglePlayKeystore)
      androidVariableGroup: 'ApplicationTemplate.Distribution.GooglePlay'
      iosProvisioningProfileFile: $(AppStoreProvisioningProfile)
      iosCertificateFile: $(AppStoreCertificate)
      iosVariableGroup: 'ApplicationTemplate.Distribution.AppStore'

# Build steps for the Canary
# Build the project the same as prod and QA builds, but update all nuget packages to latest
- stage: Build_Canary
  condition: and(ne(variables['Build.Reason'], 'PullRequest'), eq(variables['IsCanary'], 'true'))
  dependsOn: []
  jobs:
  - template: build/stage-build.yml
    parameters:
      applicationEnvironment: Staging
      androidKeyStoreFile: $(InternalKeystore)
      androidVariableGroup: 'ApplicationTemplate.Distribution.Internal.Android'
      iosProvisioningProfileFile: $(InternalProvisioningProfile)
      iosCertificateFile: $(InternalCertificate)
      iosVariableGroup: 'ApplicationTemplate.Distribution.Internal.iOS'
      preBuildSteps:
        - task: UseDotNet@2
          displayName: 'Use .Net Core runtime 2.2.x'
          inputs:
            packageType: runtime
            version: 2.2.x
        - task: nventiveCanaryUpdater@5
          displayName: 'Canary Update'
          inputs:
            solution: $(Build.SourcesDirectory)/src/$(SolutionFileName)
            branchToMerge: master
            packageAuthor: nventive
            summaryFile: '$(Build.ArtifactStagingDirectory)/Canary.md'
            resultFile: '$(Build.ArtifactStagingDirectory)/result.json'
    
- stage: AppCenter_Staging
  condition: and(succeeded(), eq(variables['IsLightBuild'], 'false'))
  dependsOn: Build_Staging

  jobs:
  - template: build/stage-release-appcenter.yml
    parameters:
      applicationEnvironment: Staging
      deploymentEnvironment: AppCenter
      appCenterUWPSlug: $(AppCenterUWPSlug)
      appCenteriOSSlug: $(AppCenteriOSSlug)
      appCenterAndroidSlug: $(AppCenterAndroidSlug)
      androidKeyStoreFile: $(InternalKeystore)
      androidVariableGroup: 'ApplicationTemplate.Distribution.Internal.Android'

- stage: AppCenter_Production
  condition: and(succeeded(), eq(variables['IsLightBuild'], 'false'))
  dependsOn: Build_Production

  jobs:
  - template: build/stage-release-appcenter.yml
    parameters:
      applicationEnvironment: Production
      deploymentEnvironment: 'AppCenter Prod'
      appCenterUWPSlug: $(AppCenterUWPSlug_Production)
      appCenteriOSSlug: $(AppCenteriOSSlug_Production)
      appCenterAndroidSlug: $(AppCenterAndroidSlug_Production)
      androidKeyStoreFile: $(GooglePlayKeystore)
      androidVariableGroup: 'ApplicationTemplate.Distribution.GooglePlay'

- stage: AppCenter_Canary
  condition: and(succeeded(), eq(variables['IsCanary'], 'true'))
  dependsOn: Build_Canary

  jobs:
  - template: build/stage-release-appcenter.yml
    parameters:
      applicationEnvironment: Staging
      deploymentEnvironment: AppCenter
      appCenterUWPSlug: $(AppCenterUWPSlug_Canary)
      appCenteriOSSlug: $(AppCenteriOSSlug_Canary)
      appCenterAndroidSlug: $(AppCenterAndroidSlug_Canary)
      androidKeyStoreFile: $(InternalKeystore)
      androidVariableGroup: 'ApplicationTemplate.Distribution.Internal.Android'

# - stage: Azure
#   condition: and(succeeded(), eq(variables['IsLightBuild'], 'false'))
#   dependsOn: Build_Production

#   jobs:
#   - template: build/stage-release-wasm.yml

- stage: AppStore
  condition: and(succeeded(), eq(variables['IsLightBuild'], 'false'))
  dependsOn: Build_Production

  jobs:
  - template: build/stage-release-appstore.yml
    parameters:    
      applicationEnvironment: Production
      deploymentEnvironment: AppStore

- stage: GooglePlay
  condition: and(succeeded(), eq(variables['IsLightBuild'], 'false'))
  dependsOn: Build_Production

  jobs:
  - template: build/stage-release-googleplay.yml
    parameters:    
      applicationEnvironment: Production
      deploymentEnvironment: GooglePlay
