parameters:
- name: pathToSrc
  type: string
  default: ''
- name: solutionFileName
  type: string
  default: ''
- name: solutionName
  type: string
  default: ''

steps:
- template: templates/dotnet-install.yml

#-if false
- download: current
  condition: eq('GeneratedApp.sln', '${{ parameters.solutionFileName }}')
  artifact: GeneratedApp
#-endif

- script: >
    dotnet test ${{ parameters.pathToSrc }}/app/${{ parameters.solutionName }}.Tests
    --logger trx
    -p:Configuration=Release
    -p:CollectCoverage=true
    -p:CoverletOutputFormat=cobertura
    -p:CoverletOutput=${{ parameters.pathToSrc }}/coverage
    -p:ExcludeByFile="**/*.g.cs"
  displayName: 'Run Tests'
  condition: succeeded()

- task: PublishTestResults@2
  displayName: Publish Test Results
  condition: succeeded()
  inputs:
    testResultsFormat : VSTest
    testResultsFiles: '**/*.trx'
    searchFolder: ${{ parameters.pathToSrc }}/app/${{ parameters.solutionName }}.Tests

- task: PublishCodeCoverageResults@1
  displayName: Publish Code Coverage Results
  condition: succeeded()
  inputs:
    codeCoverageTool: 'Cobertura'
    summaryFileLocation: "${{ parameters.pathToSrc }}/coverage.cobertura.xml"

- publish: $(Build.ArtifactStagingDirectory)
  displayName: 'Publish Artifact'
  condition: always()
  artifact: $(ArtifactName)

#-if false
- task: DeleteFiles@1
  displayName: "Remove downloaded artifacts (GeneratedApp folder)"
  condition: always()
  inputs:
    SourceFolder: $(Pipeline.Workspace)/GeneratedApp
    RemoveSourceFolder: true
    Contents: '**'
#-endif

- task: PostBuildCleanup@3
  displayName: 'Post-Build cleanup :  Cleanup files to keep build server clean!'
  condition: always()
