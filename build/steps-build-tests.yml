parameters:
- name: pathToSrc
  type: string
  default: ''
- name: solutionFileName
  type: string
  default: ''
- name: solutionName
  type: string
  default: ''

steps:
#- template: templates/dotnet-install-windows.yml

#-if false
- download: current
  condition: eq('GeneratedApp.sln', '${{ parameters.solutionFileName }}')
  artifact: GeneratedApp
#-endif

- task: UseDotNet@2
  displayName: 'Install Latest .NET SDK'
  inputs:
    packageType: 'sdk'
    version: '6.0.403'

- powershell: dotnet workload install maui
  displayName: Install Latest .NET MAUI Workload


- task: gitversion/setup@0
  retryCountOnTaskFailure: 3
  inputs:
    versionSpec: '5.10.1'
  displayName: 'Install GitVersion'

- task: gitversion/execute@0
  inputs:
    useConfigFile: true
    configFilePath: $(Build.SourcesDirectory)/gitversion.yml
  displayName: 'Calculate version'

- script: >
    dotnet test ${{ parameters.pathToSrc }}/app/${{ parameters.solutionName }}.Tests
    /p:Configuration=Release
    /p:CollectCoverage=true 
    /p:CoverletOutputFormat=cobertura
    /p:CoverletOutput=${{ parameters.pathToSrc }}/coverage
    /p:ExcludeByFile="**/*.g.cs"
    --logger trx
  displayName: 'Run Tests'
  condition: succeeded()

- task: CopyFiles@2
  displayName: 'Copy binlog (if any) to artifact directory'
  condition: always()
  inputs:
    Contents: '**/*.binlog'
    flattenFolders : true
    TargetFolder: '$(Build.ArtifactStagingDirectory)'

- task: PublishTestResults@2
  displayName: Publish test results
  condition: succeeded()
  inputs:
    testRunner: VSTest
    testResultsFiles: "**/*.trx"

- task: PublishCodeCoverageResults@1
  displayName: Publish code coverage report
  condition: succeeded()
  inputs:
    codeCoverageTool: 'Cobertura'
    summaryFileLocation: "${{ parameters.pathToSrc }}/coverage.cobertura.xml"

- publish: $(Build.ArtifactStagingDirectory)
  displayName: 'Publish Artifact'
  condition: always()
  artifact: $(ArtifactName)

#-if false
- task: DeleteFiles@1
  displayName: "Remove downloaded artifacts (GeneratedApp folder)"
  condition: always()
  inputs:
    SourceFolder: $(Pipeline.Workspace)/GeneratedApp
    RemoveSourceFolder: true
    Contents: '**'
#-endif

- task: PostBuildCleanup@3
  displayName: 'Post-Build cleanup :  Cleanup files to keep build server clean!'
  condition: always()
