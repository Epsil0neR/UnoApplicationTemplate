parameters:
- name: androidKeyStoreFile
  type: string
  default: ''
- name: pathToSrc
  type: string
  default: ''
- name: solutionName
  type: string
  default: ''
- name: pathToAndroidManifest
  type: string
  default: ''

steps:
#- template: templates/dotnet-install-windows.yml

#-if false
- download: current
  condition: eq('GeneratedApp', '${{ parameters.solutionName }}')
  artifact: GeneratedApp
#-endif

- task: UseDotNet@2
  displayName: 'Install Latest .NET SDK'
  inputs:
    packageType: 'sdk'
    version: '6.0.403'

- powershell: dotnet workload install maui
  displayName: Install Latest .NET MAUI Workload

- task: gitversion/setup@0
  retryCountOnTaskFailure: 3
  inputs:
    versionSpec: '5.10.1'
  displayName: 'Install GitVersion'

- task: gitversion/execute@0
  inputs:
    useConfigFile: true
    configFilePath: $(Build.SourcesDirectory)/gitversion.yml
  displayName: 'Calculate Version'

- task: DownloadSecureFile@1
  name: keyStore
  displayName: "Download Keystore from Secure Files"
  inputs:
    secureFile: ${{ parameters.androidKeyStoreFile }}

- task: android-manifest-package-name@1
  displayName: "Update Bundle Identifier"
  inputs:
    sourcePath: ${{ parameters.pathToAndroidManifest }}
    packageName: $(ApplicationIdentifier)
    printFile: true

- task: android-manifest-version@1
  displayName: "Bump Android Manifest Version"
  inputs:
    sourcePath: ${{ parameters.pathToAndroidManifest }}
    versionCode: $(PreReleaseNumber)
    versionName: $(MajorMinorPatch)
    printFile: true

- script: |
    cd ${{ parameters.pathToSrc }}/app/${{ parameters.solutionName }}.Mobile
    dotnet build -f:$(BuildTargetFramework) -c:Release "/p:InformationalVersion=%GITVERSION_InformationalVersion%" /p:AndroidSigningKeyStore=$(keyStore.secureFilePath) /p:AndroidSigningStorePass=$(AndroidSigningStorePass) /p:AndroidSigningKeyPass=$(AndroidSigningKeyPass) /p:AndroidSigningKeyAlias=$(AndroidSigningKeyAlias) /p:AndroidKeyStore=true /bl:$(build.artifactstagingdirectory)/build-$(BuildTargetFramework).binlog /p:IsLightBuild=$(IsLightBuild)
  displayName: Build Project for Release
  condition: eq(variables['IsLightBuild'], 'true')

- script: |
    cd ${{ parameters.pathToSrc }}/app/${{ parameters.solutionName }}.Mobile
    dotnet publish -f:net6.0-android -c:Release "/p:InformationalVersion=%GITVERSION_InformationalVersion%" /p:AndroidSigningKeyStore=$(keyStore.secureFilePath) /p:AndroidSigningStorePass=$(AndroidSigningStorePass) /p:AndroidSigningKeyPass=$(AndroidSigningKeyPass) /p:AndroidSigningKeyAlias=$(AndroidSigningKeyAlias) /p:AndroidKeyStore=true /bl:$(build.artifactstagingdirectory)/build-$(BuildTargetFramework).binlog /p:IsLightBuild=$(IsLightBuild)
  displayName: Build Project for Release
  condition: eq(variables['IsLightBuild'], 'false')

- task: CopyFiles@2
  displayName: 'Copy Binary Files'
  retryCountOnTaskFailure: 3
  inputs:
    SourceFolder: '${{ parameters.pathToSrc }}/app/${{ parameters.solutionName }}.Mobile/bin/Release/net6.0-android'
    Contents: |
      **/*.aab
      **/*.apk
    TargetFolder: $(build.ArtifactStagingDirectory)
    CleanTargetFolder: false
    OverWrite: true
    flattenFolders: true

- publish: $(Build.ArtifactStagingDirectory)
  displayName: 'Publish Artifact $(ApplicationConfiguration) | $(ApplicationPlatform)'
  condition: always()
  artifact: $(ArtifactName)

#-if false
- task: DeleteFiles@1
  displayName: "Remove Downloaded Artifacts (GeneratedApp Folder)"
  condition: always()
  inputs:
    SourceFolder: $(Pipeline.Workspace)/GeneratedApp
    RemoveSourceFolder: true
    Contents: '**'
#-endif

- task: PostBuildCleanup@3
  displayName: 'Post-Build Cleanup: Cleanup files to keep build server clean!'
  condition: always()